import{_ as s,c as i,o as e,a6 as a}from"./chunks/framework.Cj43WC4E.js";const u=JSON.parse('{"title":"Model coupling for modelers","description":"","frontmatter":{},"headers":[],"relativePath":"model_coupling/model_coupling_modeler.md","filePath":"model_coupling/model_coupling_modeler.md","lastUpdated":null}'),t={name:"model_coupling/model_coupling_modeler.md"},l=a(`<h1 id="Model-coupling-for-modelers" tabindex="-1">Model coupling for modelers <a class="header-anchor" href="#Model-coupling-for-modelers" aria-label="Permalink to &quot;Model coupling for modelers {#Model-coupling-for-modelers}&quot;">​</a></h1><p>This section uses notions from the previous section. If you are not familiar with the concepts of model coupling in PlantSimEngine, please read the previous section first: <a href="/PlantSimEngine.jl/previews/PR69/model_coupling/model_coupling_user#Model-coupling-for-users">Model coupling for users</a>.</p><h2 id="Hard-coupling" tabindex="-1">Hard coupling <a class="header-anchor" href="#Hard-coupling" aria-label="Permalink to &quot;Hard coupling {#Hard-coupling}&quot;">​</a></h2><p>A model that calls explicitly another process is called a hard-coupled model. It is implemented by calling the process function directly.</p><p>Let&#39;s go through the example processes and models from a script provided by the package here <a href="https://github.com/VirtualPlantLab/PlantSimEngine.jl/blob/main/examples/dummy.jl" target="_blank" rel="noreferrer">examples/dummy.jl</a></p><p>In this script, we declare seven processes and seven models, one for each process. The processes are simply called &quot;process1&quot;, &quot;process2&quot;..., and the model implementations are called <code>Process1Model</code>, <code>Process2Model</code>...</p><p><code>Process2Model</code> calls <code>Process1Model</code> explicitly, which defines <code>Process1Model</code> as a hard-dependency of <code>Process2Model</code>. The is as follows:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PlantSimEngine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Process2Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, models, status, meteo, constants, extra)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # computing var3 using process1:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    run!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process1, models, status, meteo, constants)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # computing var4 and var5:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> meteo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> meteo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Wind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> meteo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Rh</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>We see that coupling a model (<code>Process2Model</code>) to another process (<code>process1</code>) is done by calling the <code>run!</code> function again. The <code>run!</code> function is called with the same arguments as the <code>run!</code> function of the model that calls it, except that we pass the process we want to simulate as the first argument.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>We don&#39;t enforce any type of model to simulate <code>process1</code>. This is the reason why we can switch so easily between model implementations for any process, by just changing the model in the <code>ModelList</code>.</p></div><p>A hard-dependency must always be declared to PlantSimEngine. This is done by adding a method to the <code>dep</code> function. For example, the hard-dependency to <code>process1</code> into <code>Process2Model</code> is declared as follows:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PlantSimEngine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Process2Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractProcess1Model,)</span></span></code></pre></div><p>This way PlantSimEngine knows that <code>Process2Model</code> needs a model for the simulation of the <code>process1</code> process. Note that we don&#39;t add any constraint to the type of model we have to use (we use <code>AbstractProcess1Model</code>), because we want any model implementation to work with the coupling, as we only are interested in the value of a variable, not the way it is computed.</p><p>Even if it is discouraged, you may have a valid reason to force the coupling with a particular model, or a kind of models though. For example, if we want to use only <code>Process1Model</code> for the simulation of <code>process1</code>, we would declare the dependency as follows:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PlantSimEngine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Process2Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (process1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Process1Model,)</span></span></code></pre></div><h2 id="Soft-coupling" tabindex="-1">Soft coupling <a class="header-anchor" href="#Soft-coupling" aria-label="Permalink to &quot;Soft coupling {#Soft-coupling}&quot;">​</a></h2><p>A model that takes outputs of another model as inputs is called a soft-coupled model. There is nothing to do on the modeler side to declare a soft-dependency. The detection is done automatically by PlantSimEngine using the inputs and outputs of the models.</p>`,17),n=[l];function o(h,p,d,r,c,k){return e(),i("div",null,n)}const E=s(t,[["render",o]]);export{u as __pageData,E as default};
